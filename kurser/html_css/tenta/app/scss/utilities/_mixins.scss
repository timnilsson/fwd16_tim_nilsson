/// Prints a media query based on the input width
/// @param {int} $width - input width value to be tested
@mixin breakpoint($width)
{
    /// Check if value exists
    @if map-has-key($breakpoints, $width)
    {
        @media all and(min-width: map-get($breakpoints, $width))
        {
            @content;
        }
    }

    @else 
    {
        @warn "There is no such breakpoint";
    }
}

/// Increasing the width on some of the cards
/// @param {int} $startnumber - from what startnumber it should start rezising
@mixin cardgrowth($startnumber)
{
    flex: 0 1 33%;

    &:nth-child(#{$startnumber}n)
    {
        flex: 0 1 66.5%;
    }
}

/// Printing out standard cards, with the possibility to change the colors
/// Printing out standard cards, with the possibility to change the colors
/// @param {Hex color value} $color [map-get($colors, cardtext)] - requested color, or take a default value
/// @param {Hex color value} $bgcolor [map-get($colors, cardbg)] - requested background color, or take a default value
@mixin printcard($color:map-get($colors, landlinkbg), $bgcolor:map-get($colors, collectiontext))
{
    @extend %cardbase;
    color: $color;
    background-color: $bgcolor;

    header
    {
        background-color: brightenColor($bgcolor);
    }
}

/// Changes the opacity on all the cards
/// @param {opacity} $opacity - Requested opacity
@mixin seetrough($opacity)
{
    /// Loop trough all the cards
    @for $i from 1 through $cardnumber
    {
        &:nth-child(#{$i})
        {
            opacity: $opacity;
        }
    }
}

/// Set background-image and its properties
/// @param {url} $url - link to the image
@mixin bgimg($url)
{
    background-image: url($url);
    background-attachment: fixed;
    background-size: cover;
    background-repeat: no-repeat;
}

